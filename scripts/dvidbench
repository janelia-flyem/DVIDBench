#!/usr/bin/env python

# this script attempts to use grequests to request multiple copies of a url at the same time
# and then print out the timings. It doesn't seem to do what I want and the timings don't
# seem to reflect what I think should be reality.

import grequests
import requests
import time

request_count = 30

def multiple_times():
    #urls = ['http://tem-dvid:8000/api/node/b030517ccbe5417b9766a03133149adc/v9.1.512x512.jpg/tile/xy/1/152_63_1502'] * request_count
    #urls = ['http://10.101.10.155:8080/'] * request_count
    urls = ['http://tem-dvid:9000/'] * request_count

    rs = (grequests.get(u) for u in urls)

    start = time.time()

    results = grequests.map(rs)

    duration = time.time() - start

    elapsed_sum = 0
    min_head    = results[0].elapsed.total_seconds()
    max_head    = results[0].elapsed.total_seconds()

    for result in results:
        elapsed_sum += result.elapsed.total_seconds()
        if result.status_code != 200:
            print result.status_code
            print result.text

    if result.elapsed.total_seconds() > max_head:
        max_head = result.elapsed.total_seconds()
    if result.elapsed.total_seconds() < min_head:
        min_head = result.elapsed.total_seconds()


    print "Min: {0}ms".format(min_head * 1000)
    print "Max: {0}ms".format(max_head * 1000)
    print "Avg: {}ms".format((elapsed_sum / len(results)) * 1000)
    print "{} Concurrent {}".format(request_count, duration * 1000)


def single_time():
  single_start = time.time()
  #r = requests.get('http://10.101.10.155:8080/')
  r = requests.get('http://tem-dvid:8000/api/node/b030517ccbe5417b9766a03133149adc/v9.1.512x512.jpg/tile/xy/1/152_63_1502', stream=True)
  #return r.elapsed_full.total_seconds()
  duration2 = time.time() - single_start
  return duration2

print "single: {}ms".format(single_time() * 1000)
print "single: {}ms".format(single_time() * 1000)

multiple_times()

serial_total = 0
for i in range(0,request_count):
    times = single_time()
    serial_total += times

print "single: {}ms - avg {}ms".format(serial_total * 1000, (serial_total / request_count) * 1000)
