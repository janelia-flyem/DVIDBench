#!/usr/bin/env python

import argparse
import os
import sys
import time
import signal
import dvidbench
from dvidbench import Benchmark, ConfigError, RemoteError

__log_file__ = './dvidbench.log'

# this installs a signal handler to trap CTRL-C and exit the program
# gracefully.
def signal_handler(signal, frame):
    # do cleanup here.
    logs = open(__log_file__, 'a')
    logs.write("Program terminated by user")
    # finally quit
    sys.stderr.write("Program terminated by user.\n")
    sys.exit(0)
signal.signal(signal.SIGINT,signal_handler)



def parse_command_arguments():
    parser = argparse.ArgumentParser(description='Benchmark a DVID server')
    parser.add_argument('-v', '--version', action="version", version=dvidbench.__version__ )
    parser.add_argument('config', help='location of the configuration file', nargs='?', default=os.path.expanduser('~/.dvidbenchrc'))
    parser.add_argument('-d', '--debug',  help='print extra debugging information', action='store_true')
    parser.add_argument('-r', '--results',  help='parse results in supplied log file', action='store')
    return vars(parser.parse_args())



def main ():
    cl_args = parse_command_arguments()

    # okay, we have the command line arguments


    global __log_file__
    try:
        bench = Benchmark(args=cl_args)
        __log_file__ = bench.prepare_run()
    except (ConfigError, RemoteError) as e:
        sys.stderr.write("{}\n".format(e.msg))
        exit(1)

    print "started dvidbench v{}".format(dvidbench.__version__)
    bench.run()

    # if really fancy, we can generate an html page with graphs.


def repo_selection(repos):
    repo_list = []
    selected_repo = None
    # strip off all the null repositories
    for repokey in repos:
        if repos[repokey]:
            repo = repos[repokey]
            repo_list.append({'uuid': repokey, 'desc': repo['Description']})

    # print out the list
    for i,val in enumerate(repo_list):
        print "%s\t%s\t%s" % (i + 1, val['uuid'], val['desc'])

    while not selected_repo:
        #gather the input
        choice = raw_input("Please select a repo to test against: [1] ")

        if not choice:
            choice = 1

        try:
            choice = int(choice)
        except ValueError:
            print "invalid choice, please try again."
            continue

        try:
            selected_repo = repo_list[choice - 1]
            print "you chose %s - %s" % (choice, selected_repo['uuid'])
        except IndexError:
            print "invalid choice, please try again."
            continue

    return selected_repo['uuid']


if __name__ == "__main__":
    main()
