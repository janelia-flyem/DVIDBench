#!/usr/bin/env python

import argparse
import os
import sys
import dvidbench
import json
import time
import requests
import tempfile
from subprocess import call
from dvidbench import benchmark


def get_repo_info (config):
    server_info_url = "http://%s/api/repos/info" % config['host']
    try:
        response = requests.get(server_info_url)
    except requests.exceptions.ConnectionError:
        sys.stderr.write("There was a problem contacting the server at %s. Is it available?\n" % config['host'])
        sys.exit(1)

    if response.status_code != 200:
        sys.stderr.write("There was a problem contacting the server at %s\n" % config['host'])
        sys.exit(1)
    return response.json()

def load_settings (args):
    sys.stderr.write("looking for settings in %s\n" % args['config'])
    try:
        config_json = open(args['config'])
        config = json.load(config_json)
    except IOError:
        sys.stderr.write("unable to find the config file: %s\n" % args['config'])
        sys.exit(1)
    except ValueError:
        sys.stderr.write("There was a problem reading the config. Is it valid JSON?\n")
        sys.exit(1)
    return config

def repo_selection(repos):
    repo_list = []
    selected_repo = None
    # strip off all the null repositories
    for repokey in repos:
        if repos[repokey]:
            repo = repos[repokey]
            repo_list.append({'uuid': repokey, 'desc': repo['Description']})

    # print out the list
    for i,val in enumerate(repo_list):
        print "%s\t%s\t%s" % (i + 1, val['uuid'], val['desc'])

    while not selected_repo:
        #gather the input
        choice = raw_input("Please select a repo to test against: [1] ")

        if not choice:
            choice = 1

        try:
            choice = int(choice)
        except ValueError:
            print "invalid choice, please try again."
            continue

        try:
            selected_repo = repo_list[choice - 1]
            print "you chose %s - %s" % (choice, selected_repo['uuid'])
        except IndexError:
            print "invalid choice, please try again."
            continue

    return selected_repo['uuid']

# http://stackoverflow.com/questions/377017/test-if-executable-exists-in-python
def which(program):
    import os
    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            path = path.strip('"')
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file

    return None

def check_siege_installed(config):
    siege_path = ''
    if 'siege_path' in config:
        siege_path = which(config['siege_path'])
    else:
        print "searching for siege application..."
        siege_path = which('siege')

    if not siege_path:
        sys.stderr.write('siege does not appear to be installed in your PATH. Please install it or add the full path to your configuration\n')
        sys.exit(1)

    print "using siege found at %s" % siege_path
    config['siege_path'] = siege_path
    return

def create_temporary_urls_file (config):
    #open temporary file for writing
    urls = tempfile.NamedTemporaryFile()
    for url in config['urls']:
        print url
        urls.write(url + "\n")

    urls.flush()
    return urls


def verify_or_create_log_dir(config):
    if not os.path.isdir(config['logs']):
        os.makedirs(config['logs'])
    return

def create_log_file(config):
    config['log_file'] = time.strftime("%Y%m%d-%H%M%S-") + str(os.getpid()) + '.log'
    return


def execute_siege(config, concurrent, urls_file):
    log_file = os.path.join(config['logs'], config['log_file'])
    cmd = '%s -d1 -t5s -c%s -f%s -l%s -m%s' % (config['siege_path'], concurrent, urls_file.name, log_file, concurrent)
    call(cmd, shell=True)
    # save the results to disk / sqlite database?

def display_results(config):
    return

def main ():
    parser = argparse.ArgumentParser(description='Benchmark a DVID server')
    parser.add_argument('-v', '--version', action="version", version=dvidbench.__version__ )
    parser.add_argument('config', help='location of the configuration file', nargs='?', default='.dvidbenchrc')
    cl_args = vars(parser.parse_args())
    # okay, we have the command line arguments

    # look to see if the settings file exists.
    config = load_settings(cl_args);

    # contact the configured server and make sure it is alive
    repo_info = get_repo_info(config)

    # print out repo list and ask which one to use if one isn't specified in settings
    if not 'repo' in config:
        config['repo'] = repo_selection(repo_info)

    # TODO: create a repo and upload tiles if required

    check_siege_installed(config)

    urls_file = create_temporary_urls_file(config)

    verify_or_create_log_dir(config)

    create_log_file(config)

    print "run the benchmarking code now: " + dvidbench.__version__
    # go through the users in steps of 50 from 1 -> 500
    for i in range(0, config['max_connections'] + 1, config['increments']):
        if i == 0:
            i = 1
        print "checking %s concurrent connections" % i
        execute_siege(config, i, urls_file)

    # parse the results and provide a summary output.
    display_results(config)
    # if really fancy, we can generate an html page with graphs.

if __name__ == "__main__":
    main()
